Project Context:
    ✔ Project name @done(22-11-22 13:23)
    TheDiscoveryApp
    ✔ Define the Project (use of TMDB) @done(22-11-22 12:58)
    a web application that lets the user consult and order a list of tv shows/ movies. I will be using
    the movie database api for the content.
    Define the different components of the project:
        database:
            My db database to hold the list of authenticated users and their commands.
            ☐ setting MongoDb
            creating account and generating keys
            ✔ preparing the TMDB @done(22-12-02 15:53)
            data schema:
                ☐ user schema
                user {

                }
                ☐ order schema
                order {

                }
                ☐ Movie schema
                movie {

                }
        services:
            front end application:
                using react as a front end technologie and redux for state management
                ☐ authentification page
                ✔ content page @done(22-12-18 23:20)
                ☐ order page
            authentification service:
                using express as a backend technologie
                ☐ route for authorization and token generation
                ☐ token refresh
                ☐ check user
            Back end application:
                using nestjs as a backend technologie
                ✔ routes for data fetching @done(22-12-18 23:20)
                ✔ route for a query search @done(22-12-18 23:21)
                ☐ making order
    Project Tasks List: 
        Devops:
            Prometheus for metrics with grafana board:
                ✔ Don't Forget Prometheus helm @done(22-12-26 01:34) @critical
                General purpose metrics:
                    ✔ Mem, cpu (node exporter) @done(22-12-26 18:47) @critical
                    Prcessed requests:
                        ✔ Total number of requests. @done(22-12-20 14:46)
                        ✔ Label the metric in a way that allows you to get the success ratio (% of successful requests). @done(22-12-20 14:46)
                        ✔ Label the metrics in a way that allows you to know many requests each http route processed. @done(22-12-20 15:14)
                Business logic metrics:
                    ✔ reflect a business value of your application (number of requests per show type) @done(22-12-20 15:10)
            Adding logs:
                ✔ request_id (take from X-Request-ID or generate) @done(22-12-20 17:14)
                ✔ client_ip @done(22-12-20 17:14)
                ☐ maybe use a tool (datadog , loki ..)
            trace:
                ☐ generate tracing
                ☐ trace should have request id and client_ip
                ✔ ArgoCd @done(22-12-26 18:46) @critical
            helm:
                ✔ service helm chart @done(22-12-21 13:00)
                values.yaml:
                    ✔ image.name @done(22-12-21 12:57)
                    ✔ image.tag @done(22-12-21 12:57)
                    ✔ http.port @done(22-12-21 12:57)
                    ✔ deployment.replicas @done(22-12-21 12:57)
                    ✔ possibility to add arbitrary `labels` to the deployment @done(22-12-21 13:00)
                open telemetry:
                    ☐ define the correct env variables so that open telemetry tracing work as expected
        Automation:
            ✔ Automated infrastructure provisioning @done(22-12-22 23:11)
            ✔ Automated initialization for workloads @done(22-12-22 23:11)
            ☐ Multi-environment setup (Or at least the project should be capable of supporting extra environments)
            ✔ Well isolated and maintainable infrastructure layers (Microstacks) @done(22-12-23 16:28)
            CI/CD:
                ✔ Test/eslint @done(22-12-24 22:51)
                ✔ Package @done(22-12-24 22:51)
                ☐ Automated Deployment
        Deployment:
            -Usage of Microservices:
                ✔ Use all good practices of tracking workloads health @done(22-12-26 01:32)
                ✔ restoring them when needed @done(22-12-26 12:46)
            -Adequate choice of deployment strategy (+ explanation):
                ☐ deployment strategy
                ☐ explanation
                ☐ Note: Recreate and Rolling updates are not accepted
            ✔ Use of required configurations and secrets (treat those secrets carefully) @done(22-12-24 22:51)
            ☐ Use an adequate network architecture and a well-defined set of network policies (ingress)
            ✔ Have at least one endpoint exposed to the public (loadbalancer) @done(22-12-23 16:28)
    Stuff done but not planned:
        ✔ different namespace @done(22-12-23 11:37)
    what can be added: 
        ☐ Ingress /auth => auth and /show => backend watch video 2
    Architecture:
        ☐ add services icons/description
        ☐ add prometheus/argocd/grafana descritptions
        ☐ add zipkin
        ☐ update namespaces
        ☐ update public ip address
        ☐ update CI/CD